# docker-compose.yml
version: "3.9"

# ──────────────────────────────── VOLUMES ────────────────────────────────
volumes:
  pgdata:
  prom_data:
  metabase_data:

# ──────────────────────────────── NETWORKS ───────────────────────────────
networks:
  prefect_internal_network:
    external: true
    name: prefect_internal_network

# ──────────────────────────────── SERVICES ───────────────────────────────
services:
  # ─── Prefect Orion (API + UI) ──────────────────────────────────────────
  prefect-orion:
    image: mrschrodingers/pmi-orion:latest
    env_file: .env
    environment:
      # DB
      PREFECT_API_DATABASE_CONNECTION_URL: ${DATABASE_URL}
      PREFECT_API_DATABASE_MIGRATE_ON_START: "true"

      # UI (gera o bundle)
      PREFECT_PUBLIC_UI_URL: ${PREFECT_PUBLIC_UI_URL}
      PREFECT_UI_URL:        ${PREFECT_PUBLIC_UI_URL}
      PREFECT_UI_API_URL:    ${PREFECT_UI_API_URL}
      PREFECT_UI_SETTINGS__apiUrl: ${PREFECT_UI_API_URL}

      # Segurança
      PREFECT_SERVER_API_AUTH_STRING: ${PREFECT_SERVER_API_AUTH_STRING}
      PREFECT_SERVER_API_CSRF_PROTECTION_ENABLED: "true"
      PREFECT_SERVER_API_CSRF_TOKEN_EXPIRATION: ${PREFECT_SERVER_API_CSRF_TOKEN_EXPIRATION}

      # Outros flags
      COMPOSE_NETWORK_NAME: ${COMPOSE_NETWORK_NAME}
      APP_ROLE: orion
      AUTO_DEPLOY_ON_START: "true"
      AUTO_CREATE_POOL: "true"

    ports:
      - "${HOST_PREFECT_PORT}:4200"
    networks: [prefect_internal_network]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: on-failure
    depends_on:
      db: { condition: service_healthy }
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/health"]
      interval: 30s
      timeout: 10s
      retries: 15
      start_period: 60s

  # ─── Prefect Worker (Docker Work-Pool) ─────────────────────────────────
  prefect-worker:
    image: mrschrodingers/pmi-runtime:latest 
    env_file: .env
    environment:
      PREFECT_API_URL:  http://prefect-orion:4200/api
      PREFECT_API_AUTH_STRING: ${PREFECT_SERVER_API_AUTH_STRING}
      PREFECT_CLIENT_CSRF_SUPPORT_ENABLED: "true"
    volumes: [/var/run/docker.sock:/var/run/docker.sock]
    networks: [prefect_internal_network]
    restart: on-failure
    depends_on: { prefect-orion: { condition: service_healthy } }
    entrypoint: ["/app/infrastructure/prefect/worker/worker_entrypoint.sh"]  
    healthcheck:
      test: ["CMD", "prefect", "worker", "inspect"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ─── PostgreSQL ────────────────────────────────────────────────────────
  db:
    image: postgres:14
    env_file: .env
    networks:
      - prefect_internal_network
    ports:
      - "${HOST_POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 30s
      timeout: 5s
      retries: 5

  # ─── Redis ─────────────────────────────────────────────────────────────
  redis:
    image: redis:7-alpine
    env_file: .env
    networks:
      - prefect_internal_network
    expose: ["6379"]
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ─── Pushgateway ───────────────────────────────────────────────────────
  pushgateway:
    image: prom/pushgateway:latest
    env_file: .env
    networks:
      - prefect_internal_network
    expose: ["9091"]
    restart: on-failure

  # ─── Prometheus ────────────────────────────────────────────────────────
  prometheus:
    image: prom/prometheus:latest
    env_file: .env
    networks:
      - prefect_internal_network
    volumes:
      - prom_data:/prometheus
    expose: ["9090"]
    restart: on-failure

  # ─── Grafana ───────────────────────────────────────────────────────────
  grafana:
    image: grafana/grafana-oss:latest
    env_file: .env
    networks:
      - prefect_internal_network
    ports:
      - "${HOST_GRAFANA_PORT}:3000"
    restart: on-failure
