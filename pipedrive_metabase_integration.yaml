apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-orion
  labels:
    app: prefect-orion
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prefect-orion
  template:
    metadata:
      labels:
        app: prefect-orion
    spec:
      containers:
      - name: prefect-orion
        readinessProbe:
          httpGet:
            path: /api/health
            port: 4200
          initialDelaySeconds: 15
          periodSeconds: 5
          failureThreshold: 3
        image: pipedrive_metabase_integration-prefect-orion:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 4200
        env:
        - name: APP_ROLE
          value: "orion"
        envFrom:
        - configMapRef:
            name: observability-config
---
apiVersion: v1
kind: Service
metadata:
  name: prefect-orion
spec:
  type: NodePort
  selector:
    app: prefect-orion
  ports:
  - protocol: TCP
    port: 4200
    targetPort: 4200
---
apiVersion: batch/v1
kind: Job
metadata:
  name: etl
  labels:
    app: etl
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: etl
    spec:
      restartPolicy: Never
      containers:
      - name: etl
        image: pipedrive_metabase_integration-etl:latest
        imagePullPolicy: Never
        env:
        - name: APP_ROLE
          value: "etl"
        envFrom:
          - secretRef:
              name: app-secrets
        command: ["/app/entrypoint.sh"] 
        resources:
          limits:
            memory: "6Gi"
            cpu: "2"
            ephemeral-storage: "2Gi"
          requests:
            memory: "6Gi"
            cpu: "2"
            ephemeral-storage: "2Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics
  labels:
    app: metrics
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics
  template:
    metadata:
      labels:
        app: metrics
    spec:
      containers:
      - name: metrics
        image: pipedrive_metabase_integration-metrics:latest
        imagePullPolicy: Never
        workingDir: /app
        command: ["python", "-m", "infrastructure.monitoring.metrics_server"]
        env:
        - name: APP_ROLE
          value: "metrics"
        - name: APP_METRICS_PORT
          value: "8082"
        ports:
        - containerPort: 8082
        envFrom:
        - configMapRef:
            name: observability-config
---
apiVersion: v1
kind: Service
metadata:
  name: metrics
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8082'
spec:
  selector:
    app: metrics
  type: NodePort   
  ports:
  - protocol: TCP
    port: 8082
    targetPort: 8082
---
# Se não quiser HPA, remova este bloco.
# Vou manter "metrics-hpa" apenas se você precisar.
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: metrics-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: metrics
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_DB
        volumeMounts:
        - name: pgdata
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          periodSeconds: 20
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: pgdata-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: ClusterIP
  selector:
    app: db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metabase
  labels:
    app: metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metabase
  template:
    metadata:
      labels:
        app: metabase
    spec:
      containers:
      - name: metabase
        image: metabase/metabase:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: metabase
spec:
  type: NodePort
  selector:
    app: metabase
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3015
        env:
        - name: GF_SERVER_HTTP_PORT
          value: "3015"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3015 
          initialDelaySeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3015
          initialDelaySeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3015
    targetPort: 3015
